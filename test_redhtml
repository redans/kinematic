<!DOCTYPE html>
<html>
 
<head>
    <title>Kinematics</title>
    <link rel="stylesheet" href="styles.css">
</head>
 
<body>
    <script src=https://cdnjs.cloudflare.com/ajax/libs/mathjs/11.8.0/math.js></script>
    <script src='./kynLib.js'></script>
 
    <h1>Self-centering of a Kinematic body</h1>
   
    <div class="wrapper">
        <div class="sidebar">Sidebar content</div>
        <div class="main">
            This tools enables you to calculate the self centering properties of a kinematic body (constraint in 6 degrees of freedom).
            The tool expects as input the 6 interface normals of the interface points [nx, ny, nz] and the 6 interface positions [Px,Py,Pz]. The body needs a closing force [Fx, Fy, Fz] and a location where the force attaches [X Y Z].
            Several cases are investigated when hitting the calculate button:
        This tools enables you to calculate the self centering properties of a kinematic body (constraint in 6 degrees of freedom).
The tool expects as input the 6 interface normals of the interface points [nx, ny, nz] and the 6 interface positions [Px,Py,Pz]. The body needs a closing force [Fx, Fy, Fz] and a location where the force attaches [X Y Z].
Several cases are investigated when hitting the calculate button:
     
1) the maximum allowed friction ensure the body is still self-centering
2) the reaction force on the interface without any Friction
3) the reaction forces with a given Friction
 

The condition of selfcentering is broken when the interface points get loose which in this tool means the force of the interface become negative (it needs to start pulling).</div>
    <!--     <div class="sidebar">Sidebar content</div>
      </div>
     
    <div>
        <textarea
          rows="16"
          cols="80"
          readonly
          style="border: none; text-indent: 0px; font-size: 15px;"
          wrap="hard"
        >
This tools enables you to calculate the self centering properties of a kinematic body (constraint in 6 degrees of freedom).
The tool expects as input the 6 interface normals of the interface points [nx, ny, nz] and the 6 interface positions [Px,Py,Pz]. The body needs a closing force [Fx, Fy, Fz] and a location where the force attaches [X Y Z].
Several cases are investigated when hitting the calculate button:
     
1) the maximum allowed friction ensure the body is still self-centering
2) the reaction force on the interface without any Friction
3) the reaction forces with a given Friction
 

The condition of selfcentering is broken when the interface points get loose which in this tool means the force of the interface become negative (it needs to start pulling).
        </textarea>
        </div>
 -->
        <div>
            <label for="matrix-input1">Interface normals:</label>
            <span style="display:block;">nx   ny   nz</span>
            <textarea id="matrix-input1" name="n" rows="7" cols="20"></textarea>
            <br>
 
            <label for="matrix-input2">Interface points:</label>
            <span style="display:block;">Px   Py   Pz</span>
            <textarea id="matrix-input2" name="p" rows="7" cols="20"></textarea>
            <br>
 
            <label for="matrix-input3">Closing force :</label>
            <span style="display:block;">Fx Fy Fz</span>
            <textarea id="matrix-input3" name="Fc" rows="2" cols="20"></textarea>
            <br>
 
            <label for="matrix-input4">Closing force location :</label>
            <span style="display:block;">X Y Z</span>
            <textarea id="matrix-input4" name="coordFc" rows="2" cols="20"></textarea>
            <br>
 
            <label for="matrix-input5">Friction coefficient</label>
            <span style="display:block;">between 0 and 1</span>
            <textarea id="matrix-input5" name="mu" rows="2" cols="15"></textarea>
            <br>
 
            <br>
            <button onclick="processMatrixInputs()">Press to calculate</button>
            <p id="output"></p>
          </div>
         
          <script>
            const predefinedNormals= [
                [0, 1,  0,],
                [0, 1,  0,],
                [1, 0,  0,],
                [0, 0,  1,],
                [0, 0,  1,],
                [0, 0,  1,]
          ];
 
            const predefinedPoints= [
              [1, 0, 0],
              [5, 0, 0],
              [0, 1, 0],
              [1, 1, 0],
              [5, 1, 0],
              [3, 2, 0]
            ];
           
            const predefinedForce= [
              [-1, -1, -1]
            ];
 
            const predefinedCoord= [
              [3, 1.5, 0]];
 
            const predefinedFriction= 0.1;
 
            const textareaNormals = document.getElementById("matrix-input1");
            const textareaPoints = document.getElementById("matrix-input2");
            const textareaForce = document.getElementById("matrix-input3");
            const textareaCoord = document.getElementById("matrix-input4");
            const textareaFriction = document.getElementById("matrix-input5");
         
            textareaNormals.value = predefinedNormals.map(row => row.join("\t")).join("\n");
            textareaPoints.value = predefinedPoints.map(row => row.join("\t")).join("\n");
            textareaForce.value = predefinedForce.map(row => row.join("\t")).join("\n");
            textareaCoord.value = predefinedCoord.map(row => row.join("\t")).join("\n");
            textareaFriction.value = predefinedFriction;
 
            //console.log(textareaFriction.value)
          </script>
   
 
        <div>
            <table id="output-table">
                <tr>
                <h3>Maximum friction coefficient for self centerering:</h3>
                <td id="negative-mu"></td>
                </tr>
          </table>
 

            <h3>Forces on interfaces (no Friction):</h3>
            <table id="result-table"></table>
   
            <h3>Forces on interfaces (with Friction):</h3>
            <table id="result-table2"></table>
        </div>
 

    <script>
        document.getElementById("negative-mu").textContent = "0"; // set starting value
        let nn, pp, Fcc, coordFcc; // declare the variables outside the function
 

        function processMatrixInputs() {
 
            // Get the values of the matrix input fields
            const matrixInput1 = document.getElementById("matrix-input1");
            const matrixValue1 = matrixInput1.value;
 
            const matrixInput2 = document.getElementById("matrix-input2");
            const matrixValue2 = matrixInput2.value;
 
            const matrixInput3 = document.getElementById("matrix-input3");
            const matrixValue3 = matrixInput3.value;
 
            const matrixInput4 = document.getElementById("matrix-input4");
            const matrixValue4 = matrixInput4.value;
 
            const matrixInput5 = document.getElementById("matrix-input5");
            const matrixValue5 = matrixInput5.value;
 
            // Convert the matrix values to arrays
            const matrixArray1 = matrixValue1.trim().split(/\s*\n\s*/).map(row => row.trim().split(/\s+/).map(Number));
            const matrixArray2 = matrixValue2.trim().split(/\s*\n\s*/).map(row => row.trim().split(/\s+/).map(Number));
            const matrixArray3 = matrixValue3.trim().split(/\s+/).map(Number);
            const matrixArray4 = matrixValue4.trim().split(/\s+/).map(Number);
            //const matrixArray5 = matrixValue5.trim().split(/\s+/).map(Number);
 
            // Check that the matrix arrays have the correct dimensions and contain only numbers
            const isMatrixValid1 = matrixArray1.length === 6 && matrixArray1.every(row => row.length === 3 && row.every(val => !isNaN(val)));
            const isMatrixValid2 = matrixArray2.length === 6 && matrixArray2.every(row => row.length === 3 && row.every(val => !isNaN(val)));
            const isMatrixValid3 = matrixArray3.length === 3 && matrixArray3.every(val => !isNaN(val));
            const isMatrixValid4 = matrixArray4.length === 3 && matrixArray4.every(val => !isNaN(val));
            //const isMatrixValid5 = matrixArray4.length === 1 && matrixArray5.every(val => !isNaN(val));
 
            // If any of the matrices are invalid, show an error message
            if (!isMatrixValid1 || !isMatrixValid2 || !isMatrixValid3 || !isMatrixValid4) {
                alert("One or more matrices are invalid. Please check your input and try again.");
                return;
            }
 
            // assign the values of the variables
            nn = matrixArray1;
            pp = matrixArray2;
            Fcc = matrixArray3;
            coordFcc = matrixArray4;
            mu = matrixValue5;
            //console.log(matrixValue5 )
 
            // calculate Finterface
            const [Finterface, WCSdeform] = kynCalc(nn, pp, 0, 0.1, Fcc, coordFcc);
 
            {
                const table = document.getElementById("result-table");
                table.innerHTML = ""; // clear the table
 
                // create header row with IF1 to IF6 labels
                const headerRow = document.createElement("tr");
                headerRow.appendChild(document.createElement("td")); // empty cell for row labels
                for (let i = 1; i <= 6; i++) {
                    const cell = document.createElement("td");
                    cell.appendChild(document.createTextNode("IF " + i));
                    headerRow.appendChild(cell);
                }
                table.appendChild(headerRow);
 
                // create a document fragment for all rows
                const fragment = document.createDocumentFragment();
                for (let i = 0; i < Finterface.length; i++) {
                    const row = document.createElement("tr");
                    row.appendChild(document.createElement("td")).appendChild(document.createTextNode("case " + (i + 1)));
                    for (let j = 0; j < Finterface[i].length; j++) {
                        const cell = document.createElement("td");
                        cell.appendChild(document.createTextNode(Finterface[i][j].toFixed(3)));
                        if (Finterface[i][j] < 0) {
                            cell.style.color = "red";
                        }
                        row.appendChild(cell);
                    }
                    fragment.appendChild(row);
                }
                table.appendChild(fragment);
 
            }
 
            const [FinterfaceF, WCSdeformF] = kynCalc(nn, pp, mu, 0.1, Fcc, coordFcc);
 
            const table = document.getElementById("result-table2");
            table.innerHTML = ""; // clear the table
 
            // create header row with IF1 to IF6 labels
            const headerRow = table.insertRow();
            headerRow.insertCell().appendChild(document.createTextNode("")); // empty cell for row labels
            for (let i = 1; i <= 6; i++) {
                headerRow.insertCell().appendChild(document.createTextNode("IF " + i));
            }
 
            // create a row for each case with row label and Finterface values
            for (let i = 0; i < FinterfaceF.length; i++) {
                const row = table.insertRow();
                row.insertCell().appendChild(document.createTextNode("case " + (i + 1)));
                for (let j = 0; j < FinterfaceF[i].length; j++) {
                    const cell = document.createElement("td");
                    if (FinterfaceF[i][j] < 0) {
                    cell.style.color = "red";}
                    cell.appendChild(document.createTextNode(FinterfaceF[i][j].toFixed(3)));
                    row.appendChild(cell);
                }
                table.appendChild(row);
            }
 
            function findNegativeMu(nn, pp, Fcc, coordFcc) {
                let mu = 0;
                while (true) {
                    // Calculate the forces and deformations for the current mu value
                    const [FinterfaceF, WCSdeformF] = kynCalc(nn, pp, mu, 0.1, Fcc, coordFcc);
 
                    // Check if any of the FinterfaceF values are negative
                    if (FinterfaceF.some((row) => row.some((val) => val < 0))) {
                        // Negative force found, return the current mu value
                        return mu;
                    }
 
                    // Increment the mu value and continue looping
                    mu += 0.0005;
                }
            }
 
            const mumaxvalue = findNegativeMu(nn, pp, Fcc, coordFcc)
                // update the negative-mu cell with the calculated value
            document.getElementById("negative-mu").innerHTML = mumaxvalue.toFixed(5);
 
            //console.log(mumaxvalue)



            }
    </script>



</body>



</html>
 
 
-- The information contained in this communication and any attachments is confidential and may be privileged, and is for the sole use of the intended recipient(s). Any unauthorized review, use, disclosure or distribution is prohibited. Unless explicitly stated otherwise in the body of this communication or the attachment thereto (if any), the information is provided on an AS-IS basis without any express or implied warranties or liabilities. To the extent you are relying on this information, you are doing so at your own risk. If you are not the intended recipient, please notify the sender immediately by replying to this message and destroy all copies of this message and any attachments. Neither the sender nor the company/group of companies he or she represents shall be liable for the proper and complete transmission of the information contained in this communication, or for any delay in its receipt. -- The information contained in this communication and any attachments is confidential and may be privileged, and is for the sole use of the intended recipient(s). Any unauthorized review, use, disclosure or distribution is prohibited. Unless explicitly stated otherwise in the body of this communication or the attachment thereto (if any), the information is provided on an AS-IS basis without any express or implied warranties or liabilities. To the extent you are relying on this information, you are doing so at your own risk. If you are not the intended recipient, please notify the sender immediately by replying to this message and destroy all copies of this message and any attachments. Neither the sender nor the company/group of companies he or she represents shall be liable for the proper and complete transmission of the information contained in this communication, or for any delay in its receipt.